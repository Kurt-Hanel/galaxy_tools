<tool id="feht" name="feht" version="0.1.0">
    <description>A commandline program to automatically identify makers predictive of groups.</description>
    <requirements>
        <requirement type="package" version="1.1.0">feht</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        feht -i '$metadata' -d '$data_file' -m '$binary_or_snp' > output.txt
    ]]></command>
    <inputs>
        <param name="metadata" type="data" format="txt, csv" label="Delimited Metadata Input"/>
        <param name="data_file" type="data" format="txt, csv" label="Datafile Input"/>
        <param name="binary_or_snp" type="select" label="Pick Binary or SNP">
            <option value="snp">SNP</option>
            <option value="binary">Binary</option>
        </param>
        <param name="delimiter_type" type="select" label="Metadata's delimiter type">
            <option value="\t">Tab (\t)</option>
            <option value=",">Comma (,)</option>
        </param>
    </inputs>
    <outputs>
        <data format="tabular" name="output.txt" from_work_dir="output.txt" label="output.txt"/>
    </outputs>
    <tests>
        <test>
            <param name="metadata" value="test_metadata.txt"/>
            <param name="data_file" value="test_snps.txt"/>
            <param name="binary_or_snp" value="snp"/>
            <param name="delimiter_type" value="\t"/>
            <output name="output.txt" value="output.txt">
                <assert_contents>
                    <has_text_matching expression="(Name)\s+(GroupOne)\s+\(\+\)\s+(GroupOne)\s+\(-\)\s+(GroupTwo)\s+\(\+\)\s+(GroupTwo)\s+\(\-\)\s+(pValue)\s+(Ratio)"/>
                    <has_text text="Done"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[


****
feht
****
-------------------------------------------------
feht - pronounced "fate", as the "eh" is Canadian
-------------------------------------------------

A command line program to automatically identify markers predictive of groups. Can be used with binary data, genomic (single nucleotide variant) data, or arbitrary character data.

===========
File format 
===========
The program takes command line arguments, of which 2 are required: `-i`, which specifies the information (eg. metadata) file, and `-d`, which specifies the data file. Both of these files need to be delimited with the same delimiter, eg. tab (`\t`, which is the default).

The information file should be formatted with sample names in the first column, which does not require a header; sample names need to be identical in both the information and data files. All other columns require a header, and this header will be used as a metadata category; all subsequent rows will be interpreted as values within that category. For example, the `data/test_metadata.txt` file included in this repository is as follows:

+-------------+-------+----------+
| Genomes     | Group | Position |
+-------------+-------+----------+
|     GenomeA | B     | up       |
+-------------+-------+----------+
|     GenomeB | A     | up       |
+-------------+-------+----------+
|     GenomeC | A     | down     |
+-------------+-------+----------+
|     GenomeD | C     | sideways |
+-------------+-------+----------+
|     GenomeE | B     | down     |
+-------------+-------+----------+
|     GenomeF | A     | down     |
+-------------+-------+----------+
|     GenomeG | A     | floating |
+-------------+-------+----------+
|     GenomeH | A     | up       |
+-------------+-------+----------+
|     GenomeI | B     | sideways |
+-------------+-------+----------+
|     GenomeJ | C     | down     |
+-------------+-------+----------+

The first column contains the sample names, `GenomeA, GenomeB ...` and though not required also contains a column header. Both `group` and `position` will be interpreted as metadata categories, and `A, B, C` as values within metadata category `group`, and `up, down, sideways, floating` as values with metadata category `position`.

The corresponding data file `data/test_binary.txt` looks as follows:
    
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|             | GenomeA | GenomeB | GenomeC | GenomeD | GenomeE | GenomeF | GenomeG | GenomeH | GenomeI | GenomeJ | GenomeK | GenomeL |
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|     binary1 | 0       | -       | 0       | 0       | 1       | 0       | 0       | 1       | 0       | 0       | 1       | 1       |
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|     binary2 | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       |
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|     binary3 | 1       | 1       | 0       | 0       | 0       | 0       | 1       | 1       | 1       | 1       | 0       | 0       |
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+
|     binary4 | 1       | 0       | 0       | 1       | 1       | 0       | 0       | -       | 0       | 0       | 1       | 0       |
+-------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+

In the data file, the sample names are the column headers, and must exactly match those provided in the information (metadata) file. The first column in the data file lacks a column header, but contains labels for the data being examined, in this case, `snp1, snp2, snp3, snp4 ...`. Each row represents values of the data being examined for each sample.

======================
Performing comparisons
======================

`feht` by default will perform all possible pairwise comparisons given the categories in the information file. In our example using the `data/test_metadata.txt` file, a separate comparison within the `group` category of (`A vs. B`, `A vs. C`, `A vs (B and C)`,`B vs. C`, `B vs. (A and C)`, `C vs. (A and B)`) will be performed, and likewise within the `position` category.

======================
Specifying a delimiter
======================

By default the tab character ('\t') is used as a delimiter, but any single character can be used. To use the comma character select the comma option within the delimiter selection.

        ]]></help>
    <citations>
        <citation type="bibtex">@ARTICLE{a1,
            title = {A commandline program to automatically identify markers predictive of groups. Can be used with binary data, genomic (single nucleotide variant) data, or arbitrary character data.},
            author = {Chad R. Laing},
            url = {https://github.com/chadlaing/feht}
            }
        }</citation>
    </citations>
</tool>